generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionPlan {
  NONE
  FREE
  BASIC
  PRO
  PRO_PLUS
}

model Consultation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  scheduledAt DateTime
  status      String   @default("scheduled") // scheduled, completed, cancelled
  notes       String?
  meetingLink String?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?

  @@index([userId])
}

model Subscription {
  id            String           @id @default(cuid())
  userId        String           @unique
  user          User             @relation(fields: [userId], references: [id])
  plan          SubscriptionPlan @default(FREE)
  status        String           @default("inactive") // active, expired, canceled
  searchCount   Int              @default(0)
  consultations Consultation[]
  startedAt     DateTime?        @default(now())
  endsAt        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime
  updatedAt    DateTime
  subscription Subscription?
  favorites    Favorite[]

  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  phone         String?
  resumeLink    String?
  role          Role      @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  sessions     Session[]
  accounts     Account[]
  Job          Job[]
  Consultation Consultation[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime
  updatedAt DateTime

  token          String  @unique
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String

  @@map("verifications")
}

// Seperate Models from authentication 

model Job {
  id           String           @id @default(uuid())
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  translations JobTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  detail   JobDetail?
  Favorite Favorite[]

  @@map("jobs")
}

enum Language {
  en
  es
  pt
}

model JobTranslation {
  id       String   @id @default(cuid())
  jobId    String
  language Language

  title                 String
  company               String
  salary                String
  location              String
  rating                Rating
  hiresOutside          HiresOutside
  requirements          String
  jobType               JobType
  season                JobSeason
  transportationHousing TransportationHousing
  phoneNumber           String
  overtime              OvertimeAvailability
  legalProcess          String
  processDuration       String
  approvalRate          String
  employeesHired        String
  processSpeed          ProcessSpeed
  approvalEfficiency    ApprovalEfficiency
  visaEmployees         String
  certifications        String

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, language])
  @@map("job_translations")
}

// Pricing Plans
model PricingPlan {
  id          String  @id @default(cuid())
  type        String  @unique
  highlighted Boolean @default(false)
  order       Int?

  translations PricingPlanTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pricing_plans")
}

model PricingPlanTranslation {
  id       String   @id @default(cuid())
  planId   String
  language Language

  name              String
  description       String
  monthlyPrice      String
  quarterlyPrice    String
  monthlyUsdPrice   String
  quarterlyUsdPrice String
  buttonText        String
  features          Json

  plan PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([planId, language])
  @@map("pricing_plan_translations")
}

enum Rating {
  One   @map("1")
  Two   @map("2")
  Three @map("3")
  Four  @map("4")
  Five  @map("5")
}

enum HiresOutside {
  yes
  no
  sometimes
}

enum JobType {
  full_time
  part_time
  contract
  temporary
  internship
}

enum JobSeason {
  spring
  summer
  fall
  winter
  year_round
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobId])
}

enum TransportationHousing {
  provided
  not_provided
  partial
  transportation_only
  housing_only
}

enum OvertimeAvailability {
  available
  not_available
  limited
}

enum ProcessSpeed {
  fast
  medium
  slow
}

enum ApprovalEfficiency {
  high
  medium
  low
}

// Sticky Model
model ModalContent {
  id   String @id @default(cuid())
  page String @unique

  en Json
  es Json
  pt Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Testimonials 
model Testimonial {
  id        String   @id @default(cuid())
  name      String
  country   String
  flag      String
  image     String
  textEn    String
  textEs    String
  textPt    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------- JOB EXTENSIONS -------------------

model JobDetail {
  id    String @id @default(uuid())
  jobId String @unique
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  typeJobId String?
  typeJob   TypeJob? @relation(fields: [typeJobId], references: [id])

  employerId String?
  employer   Employer? @relation(fields: [employerId], references: [id])

  basicWageRateFrom        Float?
  basicWageRateTo          Float?
  per                      String?
  worksiteCity             String?
  worksiteState            String?
  worksitePostalCode       Int?
  requestedBeginDate       DateTime?
  requestedEndDate         DateTime?
  hiringSeason             String?
  overtimeAvailable        Boolean?
  boardLodging             Boolean?
  dailyTransportation      Boolean?
  receivedDate             DateTime?
  decisionDate             DateTime?
  specialRequirements      String?
  hiringOutsideNow         Boolean?
  hiringOutsideLast3       Int?
  hiringOutsideLastYr      Int?
  caseApprovalRate         Float?
  typeOfRepresentation     String?
  daysOfGovReception       Int?
  approvalEfficiency       String?
  totalWorkersCertified    Int?
  phoneNumber              String?
  emailToApply             String?
  employerPocEmail         String?
  approvedCertifications5Y Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("job_details")
}

model Employer {
  id   String      @id @default(uuid())
  name String
  jobs JobDetail[]
}

model TypeJob {
  id   String      @id @default(uuid())
  name String
  jobs JobDetail[]
}
