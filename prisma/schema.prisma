generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  phone         String?
  resumeLink    String?
  role          Role      @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  sessions Session[]
  accounts Account[]
  Job      Job[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime
  updatedAt DateTime

  token          String  @unique
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String

  @@map("verifications")
}

// Seperate Models from authentication 

model Job {
  id           String           @id @default(uuid())
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  translations JobTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jobs")
}

enum Language {
  en
  es
  pt
}

model JobTranslation {
  id       String   @id @default(cuid())
  jobId    String
  language Language

  title                 String
  company               String
  salary                String
  location              String
  rating                Rating
  hiresOutside          HiresOutside
  requirements          String
  jobType               JobType
  season                JobSeason
  transportationHousing TransportationHousing
  phoneNumber           String
  overtime              OvertimeAvailability
  legalProcess          String
  processDuration       String
  approvalRate          String
  employeesHired        String
  processSpeed          ProcessSpeed
  approvalEfficiency    ApprovalEfficiency
  visaEmployees         String
  certifications        String

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, language])
  @@map("job_translations")
}

enum Rating {
  One   @map("1")
  Two   @map("2")
  Three @map("3")
  Four  @map("4")
  Five  @map("5")
}

enum HiresOutside {
  yes
  no
  sometimes
}

enum JobType {
  full_time
  part_time
  contract
  temporary
  internship
}

enum JobSeason {
  spring
  summer
  fall
  winter
  year_round
}

enum TransportationHousing {
  provided
  not_provided
  partial
  transportation_only
  housing_only
}

enum OvertimeAvailability {
  available
  not_available
  limited
}

enum ProcessSpeed {
  fast
  medium
  slow
}

enum ApprovalEfficiency {
  high
  medium
  low
}
